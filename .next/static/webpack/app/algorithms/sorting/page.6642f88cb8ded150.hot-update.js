"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/algorithms/sorting/page",{

/***/ "(app-pages-browser)/./app/algorithms/sorting/algorithms/merge-sort.ts":
/*!*********************************************************!*\
  !*** ./app/algorithms/sorting/algorithms/merge-sort.ts ***!
  \*********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeSort: function() { return /* binding */ mergeSort; }\n/* harmony export */ });\n// Merge sort implementation\nasync function mergeSort(array, start, end, getSpeed, updateArrayState) {\n    if (start < end) {\n        // Find the middle point\n        const mid = Math.floor((start + end) / 2);\n        // Sort first and second halves\n        await mergeSort(array, start, mid, getSpeed, updateArrayState);\n        await mergeSort(array, mid + 1, end, getSpeed, updateArrayState);\n        // Merge the sorted halves\n        await merge(array, start, mid, end, getSpeed, updateArrayState);\n    }\n    return Promise.resolve();\n}\n// Merge function for merge sort\nasync function merge(array, start, mid, end, getSpeed, updateArrayState) {\n    // Create temporary arrays\n    const leftSize = mid - start + 1;\n    const rightSize = end - mid;\n    const leftArray = new Array(leftSize);\n    const rightArray = new Array(rightSize);\n    // Copy data to temporary arrays\n    for(let i = 0; i < leftSize; i++){\n        leftArray[i] = array[start + i];\n    }\n    for(let j = 0; j < rightSize; j++){\n        rightArray[j] = array[mid + 1 + j];\n    }\n    // Merge the temporary arrays back into the main array\n    let i = 0; // Initial index of first subarray\n    let j = 0; // Initial index of second subarray\n    let k = start; // Initial index of merged subarray\n    while(i < leftSize && j < rightSize){\n        if (leftArray[i] <= rightArray[j]) {\n            array[k] = leftArray[i];\n            i++;\n        } else {\n            array[k] = rightArray[j];\n            j++;\n        }\n        // Update the array state and wait\n        updateArrayState([\n            ...array\n        ]);\n        await new Promise((resolve)=>setTimeout(resolve, getSpeed()));\n        k++;\n    }\n    // Copy the remaining elements of leftArray, if any\n    while(i < leftSize){\n        array[k] = leftArray[i];\n        i++;\n        k++;\n        // Update the array state and wait\n        updateArrayState([\n            ...array\n        ]);\n        await new Promise((resolve)=>setTimeout(resolve, getSpeed()));\n    }\n    // Copy the remaining elements of rightArray, if any\n    while(j < rightSize){\n        array[k] = rightArray[j];\n        j++;\n        k++;\n        // Update the array state and wait\n        updateArrayState([\n            ...array\n        ]);\n        await new Promise((resolve)=>setTimeout(resolve, getSpeed()));\n    }\n    return Promise.resolve();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL3NvcnRpbmcvYWxnb3JpdGhtcy9tZXJnZS1zb3J0LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0QkFBNEI7QUFDckIsZUFBZUEsVUFDcEJDLEtBQWUsRUFDZkMsS0FBYSxFQUNiQyxHQUFXLEVBQ1hDLFFBQXNCLEVBQ3RCQyxnQkFBOEM7SUFFOUMsSUFBSUgsUUFBUUMsS0FBSztRQUNmLHdCQUF3QjtRQUN4QixNQUFNRyxNQUFNQyxLQUFLQyxLQUFLLENBQUMsQ0FBQ04sUUFBUUMsR0FBRSxJQUFLO1FBRXZDLCtCQUErQjtRQUMvQixNQUFNSCxVQUFVQyxPQUFPQyxPQUFPSSxLQUFLRixVQUFVQztRQUM3QyxNQUFNTCxVQUFVQyxPQUFPSyxNQUFNLEdBQUdILEtBQUtDLFVBQVVDO1FBRS9DLDBCQUEwQjtRQUMxQixNQUFNSSxNQUFNUixPQUFPQyxPQUFPSSxLQUFLSCxLQUFLQyxVQUFVQztJQUNoRDtJQUVBLE9BQU9LLFFBQVFDLE9BQU87QUFDeEI7QUFFQSxnQ0FBZ0M7QUFDaEMsZUFBZUYsTUFDYlIsS0FBZSxFQUNmQyxLQUFhLEVBQ2JJLEdBQVcsRUFDWEgsR0FBVyxFQUNYQyxRQUFzQixFQUN0QkMsZ0JBQThDO0lBRTlDLDBCQUEwQjtJQUMxQixNQUFNTyxXQUFXTixNQUFNSixRQUFRO0lBQy9CLE1BQU1XLFlBQVlWLE1BQU1HO0lBRXhCLE1BQU1RLFlBQVksSUFBSUMsTUFBTUg7SUFDNUIsTUFBTUksYUFBYSxJQUFJRCxNQUFNRjtJQUU3QixnQ0FBZ0M7SUFDaEMsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlMLFVBQVVLLElBQUs7UUFDakNILFNBQVMsQ0FBQ0csRUFBRSxHQUFHaEIsS0FBSyxDQUFDQyxRQUFRZSxFQUFFO0lBQ2pDO0lBQ0EsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLFdBQVdLLElBQUs7UUFDbENGLFVBQVUsQ0FBQ0UsRUFBRSxHQUFHakIsS0FBSyxDQUFDSyxNQUFNLElBQUlZLEVBQUU7SUFDcEM7SUFFQSxzREFBc0Q7SUFDdEQsSUFBSUQsSUFBSSxHQUFHLGtDQUFrQztJQUM3QyxJQUFJQyxJQUFJLEdBQUcsbUNBQW1DO0lBQzlDLElBQUlDLElBQUlqQixPQUFPLG1DQUFtQztJQUVsRCxNQUFPZSxJQUFJTCxZQUFZTSxJQUFJTCxVQUFXO1FBQ3BDLElBQUlDLFNBQVMsQ0FBQ0csRUFBRSxJQUFJRCxVQUFVLENBQUNFLEVBQUUsRUFBRTtZQUNqQ2pCLEtBQUssQ0FBQ2tCLEVBQUUsR0FBR0wsU0FBUyxDQUFDRyxFQUFFO1lBQ3ZCQTtRQUNGLE9BQU87WUFDTGhCLEtBQUssQ0FBQ2tCLEVBQUUsR0FBR0gsVUFBVSxDQUFDRSxFQUFFO1lBQ3hCQTtRQUNGO1FBRUEsa0NBQWtDO1FBQ2xDYixpQkFBaUI7ZUFBSUo7U0FBTTtRQUMzQixNQUFNLElBQUlTLFFBQVFDLENBQUFBLFVBQVdTLFdBQVdULFNBQVNQO1FBRWpEZTtJQUNGO0lBRUEsbURBQW1EO0lBQ25ELE1BQU9GLElBQUlMLFNBQVU7UUFDbkJYLEtBQUssQ0FBQ2tCLEVBQUUsR0FBR0wsU0FBUyxDQUFDRyxFQUFFO1FBQ3ZCQTtRQUNBRTtRQUVBLGtDQUFrQztRQUNsQ2QsaUJBQWlCO2VBQUlKO1NBQU07UUFDM0IsTUFBTSxJQUFJUyxRQUFRQyxDQUFBQSxVQUFXUyxXQUFXVCxTQUFTUDtJQUNuRDtJQUVBLG9EQUFvRDtJQUNwRCxNQUFPYyxJQUFJTCxVQUFXO1FBQ3BCWixLQUFLLENBQUNrQixFQUFFLEdBQUdILFVBQVUsQ0FBQ0UsRUFBRTtRQUN4QkE7UUFDQUM7UUFFQSxrQ0FBa0M7UUFDbENkLGlCQUFpQjtlQUFJSjtTQUFNO1FBQzNCLE1BQU0sSUFBSVMsUUFBUUMsQ0FBQUEsVUFBV1MsV0FBV1QsU0FBU1A7SUFDbkQ7SUFFQSxPQUFPTSxRQUFRQyxPQUFPO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9hbGdvcml0aG1zL3NvcnRpbmcvYWxnb3JpdGhtcy9tZXJnZS1zb3J0LnRzPzBlMDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWVyZ2Ugc29ydCBpbXBsZW1lbnRhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1lcmdlU29ydChcbiAgYXJyYXk6IG51bWJlcltdLFxuICBzdGFydDogbnVtYmVyLFxuICBlbmQ6IG51bWJlcixcbiAgZ2V0U3BlZWQ6ICgpID0+IG51bWJlcixcbiAgdXBkYXRlQXJyYXlTdGF0ZTogKG5ld0FycmF5OiBudW1iZXJbXSkgPT4gdm9pZFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChzdGFydCA8IGVuZCkge1xuICAgIC8vIEZpbmQgdGhlIG1pZGRsZSBwb2ludFxuICAgIGNvbnN0IG1pZCA9IE1hdGguZmxvb3IoKHN0YXJ0ICsgZW5kKSAvIDIpO1xuICAgIFxuICAgIC8vIFNvcnQgZmlyc3QgYW5kIHNlY29uZCBoYWx2ZXNcbiAgICBhd2FpdCBtZXJnZVNvcnQoYXJyYXksIHN0YXJ0LCBtaWQsIGdldFNwZWVkLCB1cGRhdGVBcnJheVN0YXRlKTtcbiAgICBhd2FpdCBtZXJnZVNvcnQoYXJyYXksIG1pZCArIDEsIGVuZCwgZ2V0U3BlZWQsIHVwZGF0ZUFycmF5U3RhdGUpO1xuICAgIFxuICAgIC8vIE1lcmdlIHRoZSBzb3J0ZWQgaGFsdmVzXG4gICAgYXdhaXQgbWVyZ2UoYXJyYXksIHN0YXJ0LCBtaWQsIGVuZCwgZ2V0U3BlZWQsIHVwZGF0ZUFycmF5U3RhdGUpO1xuICB9XG4gIFxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIE1lcmdlIGZ1bmN0aW9uIGZvciBtZXJnZSBzb3J0XG5hc3luYyBmdW5jdGlvbiBtZXJnZShcbiAgYXJyYXk6IG51bWJlcltdLFxuICBzdGFydDogbnVtYmVyLFxuICBtaWQ6IG51bWJlcixcbiAgZW5kOiBudW1iZXIsXG4gIGdldFNwZWVkOiAoKSA9PiBudW1iZXIsXG4gIHVwZGF0ZUFycmF5U3RhdGU6IChuZXdBcnJheTogbnVtYmVyW10pID0+IHZvaWRcbik6IFByb21pc2U8dm9pZD4ge1xuICAvLyBDcmVhdGUgdGVtcG9yYXJ5IGFycmF5c1xuICBjb25zdCBsZWZ0U2l6ZSA9IG1pZCAtIHN0YXJ0ICsgMTtcbiAgY29uc3QgcmlnaHRTaXplID0gZW5kIC0gbWlkO1xuICBcbiAgY29uc3QgbGVmdEFycmF5ID0gbmV3IEFycmF5KGxlZnRTaXplKTtcbiAgY29uc3QgcmlnaHRBcnJheSA9IG5ldyBBcnJheShyaWdodFNpemUpO1xuICBcbiAgLy8gQ29weSBkYXRhIHRvIHRlbXBvcmFyeSBhcnJheXNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWZ0U2l6ZTsgaSsrKSB7XG4gICAgbGVmdEFycmF5W2ldID0gYXJyYXlbc3RhcnQgKyBpXTtcbiAgfVxuICBmb3IgKGxldCBqID0gMDsgaiA8IHJpZ2h0U2l6ZTsgaisrKSB7XG4gICAgcmlnaHRBcnJheVtqXSA9IGFycmF5W21pZCArIDEgKyBqXTtcbiAgfVxuICBcbiAgLy8gTWVyZ2UgdGhlIHRlbXBvcmFyeSBhcnJheXMgYmFjayBpbnRvIHRoZSBtYWluIGFycmF5XG4gIGxldCBpID0gMDsgLy8gSW5pdGlhbCBpbmRleCBvZiBmaXJzdCBzdWJhcnJheVxuICBsZXQgaiA9IDA7IC8vIEluaXRpYWwgaW5kZXggb2Ygc2Vjb25kIHN1YmFycmF5XG4gIGxldCBrID0gc3RhcnQ7IC8vIEluaXRpYWwgaW5kZXggb2YgbWVyZ2VkIHN1YmFycmF5XG4gIFxuICB3aGlsZSAoaSA8IGxlZnRTaXplICYmIGogPCByaWdodFNpemUpIHtcbiAgICBpZiAobGVmdEFycmF5W2ldIDw9IHJpZ2h0QXJyYXlbal0pIHtcbiAgICAgIGFycmF5W2tdID0gbGVmdEFycmF5W2ldO1xuICAgICAgaSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcnJheVtrXSA9IHJpZ2h0QXJyYXlbal07XG4gICAgICBqKys7XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSB0aGUgYXJyYXkgc3RhdGUgYW5kIHdhaXRcbiAgICB1cGRhdGVBcnJheVN0YXRlKFsuLi5hcnJheV0pO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBnZXRTcGVlZCgpKSk7XG4gICAgXG4gICAgaysrO1xuICB9XG4gIFxuICAvLyBDb3B5IHRoZSByZW1haW5pbmcgZWxlbWVudHMgb2YgbGVmdEFycmF5LCBpZiBhbnlcbiAgd2hpbGUgKGkgPCBsZWZ0U2l6ZSkge1xuICAgIGFycmF5W2tdID0gbGVmdEFycmF5W2ldO1xuICAgIGkrKztcbiAgICBrKys7XG4gICAgXG4gICAgLy8gVXBkYXRlIHRoZSBhcnJheSBzdGF0ZSBhbmQgd2FpdFxuICAgIHVwZGF0ZUFycmF5U3RhdGUoWy4uLmFycmF5XSk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGdldFNwZWVkKCkpKTtcbiAgfVxuICBcbiAgLy8gQ29weSB0aGUgcmVtYWluaW5nIGVsZW1lbnRzIG9mIHJpZ2h0QXJyYXksIGlmIGFueVxuICB3aGlsZSAoaiA8IHJpZ2h0U2l6ZSkge1xuICAgIGFycmF5W2tdID0gcmlnaHRBcnJheVtqXTtcbiAgICBqKys7XG4gICAgaysrO1xuICAgIFxuICAgIC8vIFVwZGF0ZSB0aGUgYXJyYXkgc3RhdGUgYW5kIHdhaXRcbiAgICB1cGRhdGVBcnJheVN0YXRlKFsuLi5hcnJheV0pO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBnZXRTcGVlZCgpKSk7XG4gIH1cbiAgXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbiJdLCJuYW1lcyI6WyJtZXJnZVNvcnQiLCJhcnJheSIsInN0YXJ0IiwiZW5kIiwiZ2V0U3BlZWQiLCJ1cGRhdGVBcnJheVN0YXRlIiwibWlkIiwiTWF0aCIsImZsb29yIiwibWVyZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxlZnRTaXplIiwicmlnaHRTaXplIiwibGVmdEFycmF5IiwiQXJyYXkiLCJyaWdodEFycmF5IiwiaSIsImoiLCJrIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/sorting/algorithms/merge-sort.ts\n"));

/***/ })

});